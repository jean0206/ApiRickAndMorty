{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jan carlos\\\\Documents\\\\2021\\\\NextJs\\\\RickAndMorty\\\\pages\\\\characters\\\\[id].js\";\nimport { useRouter } from \"next/router\";\nexport default function Character(props) {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  console.log(props.character);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Post: \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\nexport async function getStaticPaths() {\n  const res = await fetch(\"https://rickandmortyapi.com/api/character\");\n  const characters = await res.json();\n  console.log(characters);\n  const paths = characters['results'].map(character => ({\n    params: {\n      id: character.id\n    }\n  }));\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${params.id}`);\n  const character = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      character\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/jan carlos/Documents/2021/NextJs/RickAndMorty/pages/characters/[id].js"],"names":["useRouter","Character","props","router","id","query","console","log","character","getStaticPaths","res","fetch","characters","json","paths","map","params","fallback","getStaticProps"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,SAAlB;AACA,sBAAO;AAAA,yBAAUJ,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED,OAAO,eAAeK,cAAf,GAAgC;AACrC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2CAAD,CAAvB;AACA,QAAMC,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAzB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AAEA,QAAME,KAAK,GAAGF,UAAU,CAAC,SAAD,CAAV,CAAsBG,GAAtB,CAA2BP,SAAD,KAAgB;AACtDQ,IAAAA,MAAM,EAAE;AAAEZ,MAAAA,EAAE,EAAEI,SAAS,CAACJ;AAAhB;AAD8C,GAAhB,CAA1B,CAAd;AAIA,SAAO;AACLU,IAAAA,KADK;AAELG,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEF,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMN,GAAG,GAAG,MAAMC,KAAK,CACpB,6CAA4CK,MAAM,CAACZ,EAAG,EADlC,CAAvB;AAGA,QAAMI,SAAS,GAAG,MAAME,GAAG,CAACG,IAAJ,EAAxB,CAN+C,CAQ/C;;AACA,SAAO;AAAEX,IAAAA,KAAK,EAAE;AAAEM,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import { useRouter } from \"next/router\";\r\n\r\nexport default function Character(props) {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  console.log(props.character);\r\n  return <p>Post: {id}</p>;\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const res = await fetch(\"https://rickandmortyapi.com/api/character\");\r\n  const characters = await res.json();\r\n  console.log(characters)\r\n\r\n  const paths = characters['results'].map((character) => ({\r\n    params: { id: character.id },\r\n  }));\r\n\r\n  return {\r\n    paths,\r\n    fallback: true,\r\n  };\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  // params contains the post `id`.\r\n  // If the route is like /posts/1, then params.id is 1\r\n  const res = await fetch(\r\n    `https://rickandmortyapi.com/api/character/${params.id}`\r\n  );\r\n  const character = await res.json();\r\n\r\n  // Pass post data to the page via props\r\n  return { props: { character } };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}