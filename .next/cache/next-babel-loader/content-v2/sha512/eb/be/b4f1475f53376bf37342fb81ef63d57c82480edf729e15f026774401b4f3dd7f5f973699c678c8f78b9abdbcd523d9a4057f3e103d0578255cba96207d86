{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jan carlos\\\\Documents\\\\2021\\\\NextJs\\\\RickAndMorty\\\\pages\\\\characters\\\\[id].js\";\nexport default function Character({\n  character\n}) {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Post: \", character.id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\nexport async function getStaticPaths() {\n  const res = await fetch(\"https://rickandmortyapi.com/api/character\");\n  const characters = await res.json();\n  console.log(characters);\n  const paths = characters['results'].map(character => ({\n    params: {\n      id: character.id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the character `id`.\n  // If the route is like /characters/1, then params.id is 1\n  const res = await fetch(`https://rickandmortyapi.com/api/character/${params.id}`);\n  const character = await res.json(); // Pass character data to the page via props\n\n  return {\n    props: {\n      character\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/jan carlos/Documents/2021/NextJs/RickAndMorty/pages/characters/[id].js"],"names":["Character","character","id","getStaticPaths","res","fetch","characters","json","console","log","paths","map","params","toString","fallback","getStaticProps","props"],"mappings":";;AAEA,eAAe,SAASA,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAAgC;AAE7C,sBAAO;AAAA,yBAAUA,SAAS,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2CAAD,CAAvB;AACA,QAAMC,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEA,QAAMI,KAAK,GAAGJ,UAAU,CAAC,SAAD,CAAV,CAAsBK,GAAtB,CAA0BV,SAAS,KAAK;AACpDW,IAAAA,MAAM,EAAE;AAAEV,MAAAA,EAAE,EAAED,SAAS,CAACC,EAAV,CAAaW,QAAb;AAAN;AAD4C,GAAL,CAAnC,CAAd;AAIA,SAAO;AACLH,IAAAA,KADK;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMR,GAAG,GAAG,MAAMC,KAAK,CACpB,6CAA4CO,MAAM,CAACV,EAAG,EADlC,CAAvB;AAGA,QAAMD,SAAS,GAAG,MAAMG,GAAG,CAACG,IAAJ,EAAxB,CAN+C,CAQ/C;;AACA,SAAO;AAAES,IAAAA,KAAK,EAAE;AAAEf,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["\r\n\r\nexport default function Character({character}) {\r\n\r\n  return <p>Post: {character.id}</p>;\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const res = await fetch(\"https://rickandmortyapi.com/api/character\");\r\n  const characters = await res.json();\r\n  console.log(characters)\r\n\r\n  const paths = characters['results'].map(character => ({\r\n    params: { id: character.id.toString() },\r\n  }));\r\n\r\n  return {\r\n    paths,\r\n    fallback: true,\r\n  };\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  // params contains the character `id`.\r\n  // If the route is like /characters/1, then params.id is 1\r\n  const res = await fetch(\r\n    `https://rickandmortyapi.com/api/character/${params.id}`\r\n  );\r\n  const character = await res.json();\r\n\r\n  // Pass character data to the page via props\r\n  return { props: { character } };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}